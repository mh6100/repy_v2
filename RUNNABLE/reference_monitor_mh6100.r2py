"""
 mh6100
 Reference monitor - Part 1

 This program checks if a file starts with 'S' and ends wit 'E' when close() is called.
 If the new file is valid, the orignial is updated to the newest file content.

This security layer inadequately handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

# creates ABFile class and Afn/Bfn objects of the class 
class ABFile():
  def __init__(self,filename,create):
    # global debug and lock
    mycontext['debug'] = False   
    mycontext['lock'] = createlock()

    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # if create = True, make the files and add 'SE' to the readat file.
    if create:
      mycontext['lock'].acquire(True)
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)

    # if create = False || no files exist, create and write "SE"
    else:
      mycontext['lock'].acquire(True)     
      # files exist
      if self.Afn in listfiles():
        self.Bfile = openfile(self.Bfn,create)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
     
      # files don't exist
      else:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        self.Afile.writeat('SE',0)
     
  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    # check theh absolute offset for values greater than offset 
    writeOffsetVal = self.Bfile.readat(None,0)
    if ((0 <= offset) and (offset <= len(writeOffsetVal))):
      self.Bfile.writeat(data, offset)

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    # check if file contents starts with "S" and ends with "E" on close. update the original file if Bfile is valid
    a_checkfile = self.Afile.readat(None, 0)
    b_checkfile = self.Bfile.readat(None, 0)

    self.Afile.close()
    self.Bfile.close()
 
    if b_checkfile != ' ':
      if ((b_checkfile[0] == a_checkfile[0]) and (b_checkfile[len(b_checkfile)-1] == a_checkfile[len(a_checkfile)-1])):
        # replace contents in Afile with those of Bfile
        # remove contents of A (backup Afile is still available)
        removefile(self.Afn)
        new_a_file = openfile(self.Afn, True)
        # add the data from Bfile to new file name
        new_a_file.writeat(b_checkfile, 0)

        new_a_file.close()

        mycontext['lock'].release()  

    else: 
        mycontext['lock'].release()




def ABopenfile(filename, create):
  return ABFile(filename,create)



# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()

